{"ast":null,"code":"import { BehaviorSubject, of, throwError } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./helper-shopping.service\";\nexport let MockApiCartService = /*#__PURE__*/(() => {\n  class MockApiCartService {\n    /********************************************************************************** */\n    // This is a mock service, Don't use examples on this page in production code. Some APIs\n    //  might be totally fake, and Some business logic usually handled on the server\n    //   will be done on this page. This page is designed to give a back fake data.\n\n    /********************************************************************************** */\n    constructor(http, helper) {\n      this.http = http;\n      this.helper = helper;\n      this.baseUrl = 'http://localhost:3000/carts/';\n      this.cartSource = new BehaviorSubject({\n        id: null,\n        userid: null,\n        products: [],\n        isCartEmpty: null,\n        cartItemsLength: null,\n        productsSubtotal: null\n      });\n      this.cart = this.cartSource.asObservable();\n    }\n\n    getCartByUserId(userid) {\n      return this.http.get(this.baseUrl + '?userid=' + userid).pipe(switchMap(carts => {\n        let cart = carts[0];\n\n        if (cart) {\n          cart.isCartEmpty = this.helper.isProductsEmpty(cart.products);\n          cart.cartItemsLength = this.helper.productsTotalItems(cart.products);\n          cart.productsSubtotal = this.helper.productsSubTotal(cart.products);\n          return of(cart);\n        } else {\n          return throwError('Unable to get shopping cart');\n        }\n      }));\n    }\n\n    updateCart(id, cart) {\n      return this.http.put(this.baseUrl + id, cart).pipe(switchMap(cart => {\n        if (cart) {\n          cart.isCartEmpty = this.helper.isProductsEmpty(cart.products);\n          cart.cartItemsLength = this.helper.productsTotalItems(cart.products);\n          cart.productsSubtotal = this.helper.productsSubTotal(cart.products);\n          return of(cart);\n        } else {\n          return throwError('Unable to update shopping cart');\n        }\n      }));\n    }\n\n    updatedCartSelection(cart) {\n      this.cartSource.next(cart);\n    }\n\n  }\n\n  MockApiCartService.ɵfac = function MockApiCartService_Factory(t) {\n    return new (t || MockApiCartService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.HelperCartService));\n  };\n\n  MockApiCartService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MockApiCartService,\n    factory: MockApiCartService.ɵfac,\n    providedIn: 'root'\n  });\n  return MockApiCartService;\n})();","map":null,"metadata":{},"sourceType":"module"}